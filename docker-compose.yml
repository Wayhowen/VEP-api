version: "3.1"

services:
  api-external:
    image: api-external
    build:
      context: api_external/.
      dockerfile: Dockerfile
    environment:
      API_EXT_ENABLED: 'true'
    volumes:
      - ./api_external/:/code
    ports:
      - "8000:8000"
    networks:
      - vep
    tty: true
    stdin_open: true
    #    command: sh -c "python"
    depends_on:
      - rabbit
    command: sh -c "cd /code && python manage.py runserver 0.0.0.0:8000 --settings=app.settings.base"
#    command: sh -c "cd /code && python manage.py migrate --settings=app.settings.base"
#    command: sh -c "cd /code && python manage.py makemigrations --settings=app.settings.base"
#    command: sh -c "cd /code && python manage.py creatersakey --settings=api_external.app.settings.base"
#    command: sh -c "cd /code && python manage.py create_api_key --settings=app.settings.base"
#    command: sh -c "cd /code && python manage.py read_data --settings=app.settings.base"

  worker:
    build:
      context: api_internal/.
      dockerfile: Dockerfile
    command: celery -A tasks.celeryapp worker --loglevel=info -Q process_data_q
#    command: ls
    environment:
      SETTINGS_MODULE: settings.base
    networks:
      - vep
    volumes:
      - ./api_internal:/code
    depends_on:
      - rabbit

  rabbit:
      image: rabbitmq:3-management
      hostname: rabbit1
      restart: always
      environment:
        RABBITMQ_DEFAULT_USER: vep
        RABBITMQ_DEFAULT_PASS: HCL9aN7EAg46497kKJUnfm6B
      networks:
        - vep
      ports:
      - '9004:15672'
      - '9005:5672'

  run_external_unit_tests:
    image: api-external
    build:
      context: api_external/.
      dockerfile: Dockerfile
    environment:
      API_EXT_ENABLED: 'true'
    volumes:
      - ./api_external/:/code
    ports:
      - "8000:8000"
    networks:
      - vep
    tty: true
    stdin_open: true
    command: sh -c "cd /code && python manage.py test --settings=app.settings.test"


networks:
  vep:

volumes:
  vep_data:

