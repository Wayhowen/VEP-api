# Generated by Django 3.1.6 on 2021-03-02 18:16
from django.core.validators import RegexValidator
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
            ],
            options={
                'permissions': (('sample_practitioner_perm', 'Can do practitioner stuff'),
                                ('sample_family_perm', 'Can do family stuff'),
                                ('sample_patient_perm', 'Can do patient stuff'),
                                ('sample_admin_perm', 'Can do admin stuff')),
                'managed': False,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('first_name', models.CharField(max_length=11)),
                ('last_name', models.CharField(max_length=17)),
                (
                'gender', models.CharField(choices=[('M', 'MALE'), ('F', 'FEMALE')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('postcode', models.CharField(max_length=7)),
                ('height_cm', models.IntegerField()),
                ('weight_kg', models.FloatField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login',
                 models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=11, unique=True,
                                                  validators=[RegexValidator(regex='^\d{11}$',
                                                                             message='Phone number must consist of 11 numbers',
                                                                             code='nomatch')
                                                              ]
                                                  )),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('type', models.CharField(
                    choices=[('PR', 'PRACTITIONER'), ('FM', 'FAMILY_MEMBER'), ('PT', 'PATIENT'),
                             ('SA', 'SYSTEM_ADMINISTRATOR')], max_length=20, default="PT")),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set',
                                                  related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions',
                 models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                        related_name='user_set', related_query_name='user',
                                        to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
